name: Build and Deploy Docker Image for dataapi

on:
  push:
    branches:
      - master
      - oonirunv2
    paths:
      - "api/fastapi/**"
      - ".github/workflows/build_dataapi.yml"

env:
  oonidataapi_dir: ./api/fastapi
  IMAGE_NAME: ooni/dataapi

jobs:
  test:
    uses: ./.github/workflows/test_dataapi.yml

  build_and_push:
    name: Build and push
    needs: [test]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: oonipg
          POSTGRES_PASSWORD: oonipg
          POSTGRES_DB: oonipg
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Format version information
        id: version
        run: |
          DATE=$(date +'%Y%m%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          BUILD_LABEL="${DATE}-${SHORT_SHA}"
          echo "build_label=$BUILD_LABEL" >> "$GITHUB_OUTPUT"
          VERSION_NUMBER=$(cat ${{ env.oonidataapi_dir }}/pyproject.toml | grep 'version =' | awk -F '"' '{print $2}')
          echo "version_number=$VERSION_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Build and Push Docker Image
        id: dockerbuild
        env:
          DOCKERFILE_PATH: ${{ env.oonidataapi_dir }}
        run: |
          TAG_LATEST=$IMAGE_NAME:latest
          TAG_ENVIRONMENT=$IMAGE_NAME:production
          TAG_BUILD_LABEL=$IMAGE_NAME:${{ steps.version.outputs.build_label }}
          TAG_VERSION=$IMAGE_NAME:v${{ steps.version.outputs.version_number }}

          echo "tag_latest=$TAG_LATEST" >> $GITHUB_OUTPUT
          echo "tag_environment=$TAG_ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "tag_build_label=$TAG_BUILD_LABEL" >> $GITHUB_OUTPUT
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT

          # Build Docker image with multiple tags
          docker build --build-arg BUILD_LABEL=${{ steps.version.outputs.build_label }} \
                       -t $TAG_BUILD_LABEL \
                       -t $TAG_ENVIRONMENT \
                       -t $TAG_LATEST \
                       -t $TAG_VERSION \
                       $DOCKERFILE_PATH
      # Setup python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install poetry
        run: |
          curl -fsS https://install.python-poetry.org | python - --preview -y

      - name: Add poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up poetry cache
        uses: actions/cache@v3
        with:
          path: "$HOME/.cache/pypoetry/virtualenvs"
          key: venv-${{ runner.os }}-${{ hashFiles('**/api/fastapi/poetry.lock') }}

      - name: Install dependencies
        run: poetry install
        working-directory: ./api/fastapi/

      # Configure database and docker
      - name: Run alembic migrations
        env:
          OONI_PG_PASSWORD: oonipg
          OONI_PG_HOST: localhost
        run: poetry run alembic upgrade head
        working-directory: ./api/fastapi/oonidataapi/

      - name: Start Docker container with PostgreSQL
        run: |
          docker run -d --name oonidataapi -p 8000:80 \
            -e POSTGRESQL_URL="postgresql://oonipg:oonipg@localhost/oonipg" \
            ${{ steps.dockerbuild.outputs.tag_version }}

      # Run smoke test
      #- name: Run smoketest against the built docker image
      #  run: poetry run python oonidataapi/tests/run_smoketest.py --backend-base-url=http://localhost:8000/
      #  working-directory: ./api/fastapi/

      - name: Push docker tags
        run: |
          # Push all tags
          docker push ${{ steps.dockerbuild.outputs.tag_latest }}
          docker push ${{ steps.dockerbuild.outputs.tag_environment }}
          docker push ${{ steps.dockerbuild.outputs.tag_build_label }}
          docker push ${{ steps.dockerbuild.outputs.tag_version }}

      #- name: Checkout ooni/devops
      #  uses: actions/checkout@v2
      #  with:
      #    repository: "ooni/devops" # Replace with your repository's name
      #    ssh-key: ${{ secrets.OONI_DEVOPS_DEPLOYKEY }}
      #    path: "ooni-devops"

      #- name: Bump version of dataapi
      #  run: |
      #    jq --arg value "v${{ steps.version.outputs.version_number }}" \
      #        '(.ooni_service_config.dataapi_version) = $value' \
      #        ${BASE_DIR}/terraform.tfvars.json > ${BASE_DIR}/terraform.tfvars.json.tmp \
      #    && mv ${BASE_DIR}/terraform.tfvars.json.tmp ${BASE_DIR}/terraform.tfvars.json
      #  env:
      #    BASE_DIR: "ooni-devops/tf/environments/prod"

      #- name: Commit changes
      #  id: commit
      #  run: |
      #    cd ooni-devops
      #    git config --global user.email "nothuman@ooni.org"
      #    git config --global user.name "OONI Github Actions Bot"
      #    git checkout -b bump-api
      #    git add .
      #    git commit -m "auto: update oonidataapi package version to v${{ steps.version.outputs.version_number }}" || echo "No changes to commit"
      #    git push origin
